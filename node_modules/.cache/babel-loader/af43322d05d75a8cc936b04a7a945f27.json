{"ast":null,"code":"import _objectSpread from \"/Users/phoebe/homework/obdesign/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { BUY_PRODUCT, UPDATE_CART } from '../action/ShopCar';\nconst initialState = {\n  cartDate: []\n};\n\nconst ShopCar = (state = initialState, action) => {\n  switch (action.type) {\n    case BUY_PRODUCT:\n      const existing = state.cartDate.find(val => val.name === action.data.name);\n\n      if (existing) {\n        return _objectSpread({}, state, {\n          cartDate: state.cartDate.map(val => {\n            if (val.name === action.data.name) {\n              return _objectSpread({}, val, {\n                quantity: val.quantity + 1\n              });\n            }\n\n            return _objectSpread({}, val);\n          }),\n          totalCount: state.cartDate.reduce((acc, cur) => acc.quantity + cur.quantity, 0)\n        });\n      }\n\n      return _objectSpread({}, state, {\n        cartDate: [...state.cartDate, action.data]\n      });\n\n    case UPDATE_CART:\n      return _objectSpread({}, state, {\n        cartDate: state.cartDate.map(val => {\n          if (val.name === action.data.name) {\n            return _objectSpread({}, action.data);\n          }\n\n          return _objectSpread({}, val);\n        })\n      });\n\n    default:\n      return state;\n  }\n}; // const Product = (state=[],action) => {\n//     switch (action.type){\n//         case 'BUY_PRODUCT':\n//             return{\n//                 id: action.id,\n//                 product: {...action.product},\n//                 quantity: action.quantity\n//             };\n//         case 'NOBUY_PRODUCT':\n//             return Object.assign([], state).filter(state=>{\n//                 return state.id !== action.id\n//             })\n//         case 'CHANGENUM_PRODUCT':\n//             if(state.id !== action.id)\n//                 return state;\n//             return Object.assign({},state,{\n//                 quantity: action.quantity\n//             })\n//         default:\n//             return state;\n//     }\n// }\n// const ShopCar = (state=[],action) => {\n//     switch (action.type){\n//         case 'BUY_PRODUCT':\n//             if(state.map(t => {return t.product.id}).indexOf(action.product.id) >= 0){\n//                 alert(\"此商品已加入購物車\");\n//                 return state;\n//             }\n//             else\n//                 return [\n//                     ...state,\n//                     Product(state,action)\n//                 ];\n//         case 'NOBUY_PRODUCT':\n//             return Product(state,action);\n//         case 'CHANGENUM_PRODUCT':\n//             return state.map(t=>Product(t,action));\n//         default:\n//             return state;\n//     }\n// }\n\n\nexport default ShopCar;","map":{"version":3,"sources":["/Users/phoebe/homework/obdesign/src/reducer/ShopCar.js"],"names":["BUY_PRODUCT","UPDATE_CART","initialState","cartDate","ShopCar","state","action","type","existing","find","val","name","data","map","quantity","totalCount","reduce","acc","cur"],"mappings":";AAAA,SACIA,WADJ,EAEIC,WAFJ,QAGO,mBAHP;AAKA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE;AADO,CAArB;;AAGA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAACH,YAAP,EAAoBI,MAApB,KAA+B;AAC3C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,WAAL;AACI,YAAMQ,QAAQ,GAAGH,KAAK,CAACF,QAAN,CAAeM,IAAf,CAAoBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,KAAaL,MAAM,CAACM,IAAP,CAAYD,IAApD,CAAjB;;AACA,UAAGH,QAAH,EAAa;AACT,iCACOH,KADP;AAEIF,UAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,CAAeU,GAAf,CAAmBH,GAAG,IAAG;AAC3B,gBAAIA,GAAG,CAACC,IAAJ,KAAaL,MAAM,CAACM,IAAP,CAAYD,IAA7B,EAAmC;AAC/B,uCACGD,GADH;AAEAI,gBAAAA,QAAQ,EAAEJ,GAAG,CAACI,QAAJ,GAAe;AAFzB;AAIH;;AACD,qCACOJ,GADP;AAGP,WAVS,CAFd;AAaIK,UAAAA,UAAU,EAAEV,KAAK,CAACF,QAAN,CAAea,MAAf,CAAsB,CAAEC,GAAF,EAAOC,GAAP,KAAgBD,GAAG,CAACH,QAAJ,GAAeI,GAAG,CAACJ,QAAzD,EAAkE,CAAlE;AAbhB;AAeH;;AACD,+BACOT,KADP;AAEIF,QAAAA,QAAQ,EAAE,CACN,GAAGE,KAAK,CAACF,QADH,EAENG,MAAM,CAACM,IAFD;AAFd;;AAOJ,SAAKX,WAAL;AACI,+BACOI,KADP;AAEIF,QAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,CAAeU,GAAf,CAAmBH,GAAG,IAAG;AAC/B,cAAIA,GAAG,CAACC,IAAJ,KAAaL,MAAM,CAACM,IAAP,CAAYD,IAA7B,EAAmC;AAC/B,qCACOL,MAAM,CAACM,IADd;AAGH;;AACD,mCACOF,GADP;AAGH,SATS;AAFd;;AAaJ;AACI,aAAOL,KAAP;AA1CR;AA4CH,CA7CD,C,CA+CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeD,OAAf","sourcesContent":["import {\n    BUY_PRODUCT,\n    UPDATE_CART,\n} from '../action/ShopCar'\n\nconst initialState = {\n    cartDate: [],\n};\nconst ShopCar = (state=initialState,action) => {\n    switch (action.type){\n        case BUY_PRODUCT:\n            const existing = state.cartDate.find(val => val.name === action.data.name);\n            if(existing) {\n                return { \n                    ...state,\n                    cartDate: state.cartDate.map(val=> {\n                            if (val.name === action.data.name) {\n                                return {\n                                ...val,\n                                quantity: val.quantity + 1,\n                                }\n                            }\n                            return {\n                                ...val,\n                            }\n                    }),\n                    totalCount: state.cartDate.reduce(( acc, cur ) => acc.quantity + cur.quantity,0)\n                };\n            }\n            return { \n                ...state,\n                cartDate: [\n                    ...state.cartDate,\n                    action.data,\n                ],\n            };\n        case UPDATE_CART: \n            return { \n                ...state,\n                cartDate: state.cartDate.map(val=> {\n                    if (val.name === action.data.name) {\n                        return {\n                            ...action.data,\n                        }   \n                    }\n                    return {\n                        ...val,\n                    }   \n                })\n            };\n        default:\n            return state;\n    }\n}\n\n// const Product = (state=[],action) => {\n//     switch (action.type){\n//         case 'BUY_PRODUCT':\n//             return{\n//                 id: action.id,\n//                 product: {...action.product},\n//                 quantity: action.quantity\n//             };\n//         case 'NOBUY_PRODUCT':\n//             return Object.assign([], state).filter(state=>{\n//                 return state.id !== action.id\n//             })\n//         case 'CHANGENUM_PRODUCT':\n//             if(state.id !== action.id)\n//                 return state;\n//             return Object.assign({},state,{\n//                 quantity: action.quantity\n//             })\n//         default:\n//             return state;\n//     }\n// }\n\n// const ShopCar = (state=[],action) => {\n//     switch (action.type){\n//         case 'BUY_PRODUCT':\n//             if(state.map(t => {return t.product.id}).indexOf(action.product.id) >= 0){\n//                 alert(\"此商品已加入購物車\");\n//                 return state;\n//             }\n//             else\n//                 return [\n//                     ...state,\n//                     Product(state,action)\n//                 ];\n//         case 'NOBUY_PRODUCT':\n//             return Product(state,action);\n//         case 'CHANGENUM_PRODUCT':\n//             return state.map(t=>Product(t,action));\n//         default:\n//             return state;\n//     }\n// }\n\nexport default ShopCar;"]},"metadata":{},"sourceType":"module"}