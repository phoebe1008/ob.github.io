{"ast":null,"code":"import _objectSpread from \"/Users/phoebe/homework/obdesign/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { getCart_DATA } from '../action/ShopCar';\nconst initialState = {\n  getCartDate: []\n};\n\nconst ShopCar = (state = initialState, action) => {\n  switch (action.type) {\n    case getCart_DATA:\n      return _objectSpread({}, state, {\n        getCartDate: action.data\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst Product = (state = [], action) => {\n  switch (action.type) {\n    case 'BUY_PRODUCT':\n      return {\n        id: action.id,\n        product: _objectSpread({}, action.product),\n        quantity: action.quantity\n      };\n\n    case 'NOBUY_PRODUCT':\n      return Object.assign([], state).filter(state => {\n        return state.id !== action.id;\n      });\n\n    case 'CHANGENUM_PRODUCT':\n      if (state.id !== action.id) return state;\n      return Object.assign({}, state, {\n        quantity: action.quantity\n      });\n\n    default:\n      return state;\n  }\n};\n\nconst BuyProduct = (state = [], action) => {\n  switch (action.type) {\n    case 'BUY_PRODUCT':\n      if (state.map(t => {\n        return t.product.id;\n      }).indexOf(action.product.id) >= 0) {\n        alert(\"此商品已加入購物車\");\n        return state;\n      } else return [...state, Product(state, action)];\n\n    case 'NOBUY_PRODUCT':\n      return Product(state, action);\n\n    case 'CHANGENUM_PRODUCT':\n      return state.map(t => Product(t, action));\n\n    default:\n      return state;\n  }\n};\n\nexport default ShopCar;","map":{"version":3,"sources":["/Users/phoebe/homework/obdesign/src/reducer/ShopCar.js"],"names":["getCart_DATA","initialState","getCartDate","ShopCar","state","action","type","data","Product","id","product","quantity","Object","assign","filter","BuyProduct","map","t","indexOf","alert"],"mappings":";AAAA,SAAQA,YAAR,QAA2B,mBAA3B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,WAAW,EAAE;AADI,CAArB;;AAGA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAACH,YAAP,EAAoBI,MAApB,KAA+B;AAC3C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKN,YAAL;AACI,+BAAYI,KAAZ;AAAkBF,QAAAA,WAAW,EAAEG,MAAM,CAACE;AAAtC;;AACJ;AACI,aAAOH,KAAP;AAJR;AAMH,CAPD;;AASA,MAAMI,OAAO,GAAG,CAACJ,KAAK,GAAC,EAAP,EAAUC,MAAV,KAAqB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,aAAL;AACI,aAAM;AACFG,QAAAA,EAAE,EAAEJ,MAAM,CAACI,EADT;AAEFC,QAAAA,OAAO,oBAAML,MAAM,CAACK,OAAb,CAFL;AAGFC,QAAAA,QAAQ,EAAEN,MAAM,CAACM;AAHf,OAAN;;AAKJ,SAAK,eAAL;AACI,aAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBT,KAAlB,EAAyBU,MAAzB,CAAgCV,KAAK,IAAE;AAC1C,eAAOA,KAAK,CAACK,EAAN,KAAaJ,MAAM,CAACI,EAA3B;AACH,OAFM,CAAP;;AAGJ,SAAK,mBAAL;AACI,UAAGL,KAAK,CAACK,EAAN,KAAaJ,MAAM,CAACI,EAAvB,EACI,OAAOL,KAAP;AACJ,aAAOQ,MAAM,CAACC,MAAP,CAAc,EAAd,EAAiBT,KAAjB,EAAuB;AAC1BO,QAAAA,QAAQ,EAAEN,MAAM,CAACM;AADS,OAAvB,CAAP;;AAGJ;AACI,aAAOP,KAAP;AAlBR;AAoBH,CArBD;;AAuBA,MAAMW,UAAU,GAAG,CAACX,KAAK,GAAC,EAAP,EAAUC,MAAV,KAAqB;AACpC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,aAAL;AACI,UAAGF,KAAK,CAACY,GAAN,CAAUC,CAAC,IAAI;AAAC,eAAOA,CAAC,CAACP,OAAF,CAAUD,EAAjB;AAAoB,OAApC,EAAsCS,OAAtC,CAA8Cb,MAAM,CAACK,OAAP,CAAeD,EAA7D,KAAoE,CAAvE,EAAyE;AACrEU,QAAAA,KAAK,CAAC,WAAD,CAAL;AACA,eAAOf,KAAP;AACH,OAHD,MAKI,OAAO,CACH,GAAGA,KADA,EAEHI,OAAO,CAACJ,KAAD,EAAOC,MAAP,CAFJ,CAAP;;AAIR,SAAK,eAAL;AACI,aAAOG,OAAO,CAACJ,KAAD,EAAOC,MAAP,CAAd;;AACJ,SAAK,mBAAL;AACI,aAAOD,KAAK,CAACY,GAAN,CAAUC,CAAC,IAAET,OAAO,CAACS,CAAD,EAAGZ,MAAH,CAApB,CAAP;;AACJ;AACI,aAAOD,KAAP;AAhBR;AAkBH,CAnBD;;AAqBA,eAAeD,OAAf","sourcesContent":["import {getCart_DATA} from '../action/ShopCar'\n\nconst initialState = {\n    getCartDate: [],\n};\nconst ShopCar = (state=initialState,action) => {\n    switch (action.type){\n        case getCart_DATA:\n            return { ...state,getCartDate: action.data };\n        default:\n            return state;\n    }\n}\n\nconst Product = (state=[],action) => {\n    switch (action.type){\n        case 'BUY_PRODUCT':\n            return{\n                id: action.id,\n                product: {...action.product},\n                quantity: action.quantity\n            };\n        case 'NOBUY_PRODUCT':\n            return Object.assign([], state).filter(state=>{\n                return state.id !== action.id\n            })\n        case 'CHANGENUM_PRODUCT':\n            if(state.id !== action.id)\n                return state;\n            return Object.assign({},state,{\n                quantity: action.quantity\n            })\n        default:\n            return state;\n    }\n}\n\nconst BuyProduct = (state=[],action) => {\n    switch (action.type){\n        case 'BUY_PRODUCT':\n            if(state.map(t => {return t.product.id}).indexOf(action.product.id) >= 0){\n                alert(\"此商品已加入購物車\");\n                return state;\n            }\n            else\n                return [\n                    ...state,\n                    Product(state,action)\n                ];\n        case 'NOBUY_PRODUCT':\n            return Product(state,action);\n        case 'CHANGENUM_PRODUCT':\n            return state.map(t=>Product(t,action));\n        default:\n            return state;\n    }\n}\n\nexport default ShopCar;"]},"metadata":{},"sourceType":"module"}